from enum import Enum


production_rules = {
    1: ("S", ["NEWLINE", "S'"]),
    2: ("S", ["S'"]),
    3: ("S'", ["A", "S'"]),
    4: ("S'", ["D", "S''"]),
    5: ("S''", ["D", "S''"]),
    6: ("S''", ["EOF"]),
    7: ("A", ["def", "IDENTIFIER", "(", "I", ")", ":", "B"]),
    8: ("I", ["IDENTIFIER", "I'"]),
    9: ("I'", [",", "IDENTIFIER", "I'"]),
    10: ("I'", ["''"]),
    11: ("B", ["C", "NEWLINE"]),
    12: ("B", ["NEWLINE", "Begin", "D", "B'", "End"]),
    13: ("B'", ["NEWLINE", "D", "B'"]),
    14: ("B'", ["''"]),
    15: ("C", ["return", "E"]),
    16: ("C", ["IDENTIFIER", "C''"]),
    17: ("C", ["E", "C'"]),
    18: ("C", ["print", "(", "E", ")"]),
    19: ("C'", ["[", "E", "]", "=", "E"]),
    20: ("C'", ["''"]),
    21: ("C''", ["=", "E"]),
    22: ("C''", ["(", "E'''", ")"]),
    23: ("C''", ["''"]),
    24: ("D", ["C", "NEWLINE"]),
    25: ("D", ["if", "E", ":", "B", "D'"]),
    26: ("D", ["for", "IDENTIFIER", "in", "E", ":", "B"]),
    27: ("D'", ["else", ":", "B"]),
    28: ("D'", ["''"]),
    29: ("E", ["G", "E*"]),
    30: ("E", ["H", "E*"]),
    31: ("E", ["True", "E*"]),
    32: ("E", ["False", "E*"]),
    33: ("E", ["None", "E*"]),
    34: ("E", ["-", "E", "E*"]),
    35: ("E", ["not", "E", "E*"]),
    36: ("E", ["[", "E''", "]", "E*"]),
    37: ("E", ["(", "E", ")", "E*"]),
    38: ("E*", ["E'", "E*"]),
    39: ("E*", ['"']),
    40: ("E'", ["F", "E"]),
    41: ("E'", ["[", "E", "]"]),
    42: ("E''", ["E", "E'''"]),
    43: ("E''", ["''"]),
    44: ("E'''", [",", "E", "E'''"]),
    45: ("E'''", ["''"]),
    46: ("F", ["+"]),
    47: ("F", ["-"]),
    48: ("F", ["//"]),
    49: ("F", ["%"]),
    50: ("F", ["<="]),
    51: ("F", [">="]),
    52: ("F", ["<"]),
    53: ("F", [">"]),
    54: ("F", ["!="]),
    55: ("F", ["=="]),
    56: ("F", ["and"]),
    57: ("F", ["or"]),
    58: ("G", ["0", "G'"]),
    59: ("G", ["1", "G'"]),
    60: ("G", ["2", "G'"]),
    61: ("G", ["3", "G'"]),
    62: ("G", ["4", "G'"]),
    63: ("G", ["5", "G'"]),
    64: ("G", ["6", "G'"]),
    65: ("G", ["7", "G'"]),
    66: ("G", ["8", "G'"]),
    67: ("G", ["9", "G'"]),
    68: ("G'", ["0", "G'"]),
    69: ("G'", ["1", "G'"]),
    70: ("G'", ["2", "G'"]),
    71: ("G'", ["3", "G'"]),
    72: ("G'", ["4", "G'"]),
    73: ("G'", ["5", "G'"]),
    74: ("G'", ["6", "G'"]),
    75: ("G'", ["7", "G'"]),
    76: ("G'", ["8", "G'"]),
    77: ("G'", ["9", "G'"]),
    78: ("G'", ["''"]),
    79: ("H", ['"', "H'", '"']),
    80: ("H'", ["b", "H'"]),
}


parsing_table = (
    {
        "S": {
            "NEWLINE": 1,
            "def": 2,
            "IDENTIFIER": 2,
            "(": 2,
            "return": 2,
            "print(": 2,
            "[": 2,
            "if": 2,
            "for": 2,
            "True": 2,
            "False": 2,
            "None": 2,
            "-": 2,
            "not": 2,
            "0": 2,
            "1": 2,
            "2": 2,
            "3": 2,
            "4": 2,
            "5": 2,
            "6": 2,
            "7": 2,
            "8": 2,
            "9": 2,
            '"': 2,
        },
        "S'": {
            "def": 3,
            "IDENTIFIER": 4,
            "(": 4,
            "return": 4,
            "print(": 4,
            "[": 4,
            "if": 4,
            "for": 4,
            "True": 4,
            "False": 4,
            "None": 4,
            "-": 4,
            "not": 4,
            "0": 4,
            "1": 4,
            "2": 4,
            "3": 4,
            "4": 4,
            "5": 4,
            "6": 4,
            "7": 4,
            "8": 4,
            "9": 4,
            '"': 4,
        },
        "S''": {
            "EOF": 6,
            "IDENTIFIER": 5,
            "(": 5,
            "return": 5,
            "print(": 5,
            "[": 5,
            "if": 5,
            "for": 5,
            "True": 5,
            "False": 5,
            "None": 5,
            "-": 5,
            "not": 5,
            "0": 5,
            "1": 5,
            "2": 5,
            "3": 5,
            "4": 5,
            "5": 5,
            "6": 5,
            "7": 5,
            "8": 5,
            "9": 5,
            '"': 5,
        },
        "A": {
            "def": 7,
        },
        "I": {
            "IDENTIFIER": 8,
        },
        "I'": {
            "''": 10,
            ",IDENTIFIER": 9,
        },
        "B": {
            "NEWLINE": 12,
            "IDENTIFIER": 11,
            "(": 11,
            "return": 11,
            "print(": 11,
            "[": 11,
            "True": 11,
            "False": 11,
            "None": 11,
            "-": 11,
            "not": 11,
            "0": 11,
            "1": 11,
            "2": 11,
            "3": 11,
            "4": 11,
            "5": 11,
            "6": 11,
            "7": 11,
            "8": 11,
            "9": 11,
            '"': 11,
        },
        "B'": {
            "NEWLINE": 13,
            "END": 14,
        },
        "C": {
            "IDENTIFIER": 16,
            "return": 15,
            "print(": 18,
            "(": 17,
            "[": 17,
            "True": 17,
            "False": 17,
            "None": 17,
            "-": 17,
            "not": 17,
            "0": 17,
            "1": 17,
            "2": 17,
            "3": 17,
            "4": 17,
            "5": 17,
            "6": 17,
            "7": 17,
            "8": 17,
            "9": 17,
            '"': 17,
        },
        "C'": {
            "NEWLINE": 20,
            "[": 19,
        },
        "C''": {
            "NEWLINE": 23,
            "(": 22,
            "=": 21,
        },
        "D": {
            "if": 25,
            "for": 26,
            "IDENTIFIER": 24,
            "return": 24,
            "print(": 24,
            "(": 24,
            "[": 24,
            "True": 24,
            "False": 24,
            "None": 24,
            "-": 24,
            "not": 24,
            "0": 24,
            "1": 24,
            "2": 24,
            "3": 24,
            "4": 24,
            "5": 24,
            "6": 24,
            "7": 24,
            "8": 24,
            "9": 24,
            '"': 24,
        },
        "D'": {
            "else": 27,
            "NEWLINE": 28,
            "EOF": 28,
            "END": 28,
            "if": 28,
            "for": 28,
            "IDENTIFIER": 28,
            "return": 28,
            "print(": 28,
            "(": 28,
            "[": 28,
            "True": 28,
            "False": 28,
            "None": 28,
            "-": 28,
            "not": 28,
            "0": 28,
            "1": 28,
            "2": 28,
            "3": 28,
            "4": 28,
            "5": 28,
            "6": 28,
            "7": 28,
            "8": 28,
            "9": 28,
            '"': 28,
        },
        "E": {
            "(": 37,
            "[": 36,
            "True": 31,
            "False": 32,
            "None": 33,
            "-": 34,
            "not": 35,
            "0": 29,
            "1": 29,
            "2": 29,
            "3": 29,
            "4": 29,
            "5": 29,
            "6": 29,
            "7": 29,
            "8": 29,
            "9": 29,
            ",": 30,
        },
        "E*": {
            "NEWLINE": 39,
            ")": 39,
            ":": 39,
            "]": 39,
            ",": 39,
            "[": [38, 39],
            "-": [38, 39],
            "+": [38, 39],
            "//": [38, 39],
            "%": [38, 39],
            "<=": [38, 39],
            ">=": [38, 39],
            "<": [38, 39],
            ">": [38, 39],
        },
        "F": {
            "+": 46,
            "-": 47,
            "//": 48,
            "%": 49,
            "<=": 50,
            ">=": 51,
            "<": 52,
            ">": 53,
            "==": 55,
            "and": 56,
            "or": 57,
        },
        "G": {
            "0": 58,
            "1": 59,
            "2": 60,
            "3": 61,
            "4": 62,
            "5": 63,
            "6": 64,
            "7": 65,
            "8": 66,
            "9": 67,
        },
        "G'": {
            "NEWLINE": 78,
            ")": 78,
            ":": 78,
            "[": 78,
            "]": 78,
            "-": 78,
            "+": 78,
            "//": 78,
            "%": 78,
            "<=": 78,
            ">=": 78,
            "<": 78,
            ">": 78,
            "==": 78,
            "and": 78,
            "or": 78,
            ",": 78,
            "0": 68,
            "1": 69,
            "2": 70,
            "3": 71,
            "4": 72,
            "5": 73,
            "6": 74,
            "7": 75,
            "8": 76,
            "9": 77,
        },
        "H": {
            '"': 79,
        },
        "b": {
            80,
        },
        "E'": {
            "[": 41,
            "-": 40,
            "+": 40,
            "//": 40,
            "%": 40,
            "<=": 40,
            ">=": 40,
            "<": 40,
            ">": 40,
            "==": 40,
            "!=": 40,
            "and": 40,
            "or": 40,
        },
        "E''": {
            "]": 43,
            "(": 42,
            "[": 42,
            "True": 42,
            "False": 42,
            "None": 42,
            "-": 42,
            "not": 42,
            "0": 42,
            "1": 42,
            "2": 42,
            "3": 42,
            "4": 42,
            "5": 42,
            "6": 42,
            "7": 42,
            "8": 42,
            "9": 42,
        },
        "E'''": {
            ")": 45,
            "]": 45,
            ",": 44,
        },
    },
)
# Ã  faire un enum de tous les non terminaux
