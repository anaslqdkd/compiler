from enum import Enum


class NonTerminal(Enum):
    S = "S"
    S1 = "S'"
    S2 = "S''"
    A = "A"
    I = "I"
    I1 = "I'"
    B = "B"
    B1 = "B'"
    C = "C"
    C1 = "C'"
    C2 = "C''"
    C3 = "C'''"
    D = "D"
    D1 = "D"
    E = "E"
    E1 = "E'"
    E2 = "E''"
    E3 = "E'''"
    ES = "E*"
    F = "F"
    G = "G"
    G1 = "G'"
    H = "H"
    H1 = "H'"


production_rules = {
    1: (NonTerminal.S, ["NEWLINE", NonTerminal.S1]),
    2: (NonTerminal.S, [NonTerminal.S1]),
    3: (NonTerminal.S1, [NonTerminal.A, NonTerminal.S1]),
    4: (NonTerminal.S1, [NonTerminal.D, NonTerminal.S2]),
    5: (NonTerminal.S2, [NonTerminal.D, NonTerminal.S2]),
    6: (NonTerminal.S2, ["EOF"]),
    7: (NonTerminal.A, ["def", "IDENTIFIER", "(", "I", ")", ":", NonTerminal.B]),
    8: (NonTerminal.I, ["IDENTIFIER", NonTerminal.I1]),
    9: (NonTerminal.I1, [",", "IDENTIFIER", NonTerminal.I1]),
    10: (NonTerminal.I1, ["''"]),
    11: (NonTerminal.B, [NonTerminal.C, "NEWLINE"]),
    12: (NonTerminal.B, ["NEWLINE", "Begin", NonTerminal.D, NonTerminal.B1, "End"]),
    13: (NonTerminal.B1, ["NEWLINE", NonTerminal.D, NonTerminal.B1]),
    14: (NonTerminal.B1, ["''"]),
    15: (NonTerminal.C, ["return", NonTerminal.E]),
    16: (NonTerminal.C, ["IDENTIFIER", NonTerminal.C2]),
    17: (NonTerminal.C, [NonTerminal.E, NonTerminal.C1]),
    18: (NonTerminal.C, ["print", "(", NonTerminal.E, ")"]),
    19: (NonTerminal.C1, ["[", NonTerminal.E, "]", "=", NonTerminal.E]),
    20: (NonTerminal.C1, ["''"]),
    21: (NonTerminal.C2, ["=", NonTerminal.E]),
    22: (NonTerminal.C2, ["(", NonTerminal.E3, ")"]),
    23: (NonTerminal.C2, ["''"]),
    24: (NonTerminal.D, [NonTerminal.C, "NEWLINE"]),
    25: (NonTerminal.D, ["if", NonTerminal.E, ":", NonTerminal.B, NonTerminal.D1]),
    26: (NonTerminal.D, ["for", "IDENTIFIER", "in", NonTerminal.E, ":", NonTerminal.B]),
    27: (NonTerminal.D1, ["else", ":", NonTerminal.B]),
    28: (NonTerminal.D1, ["''"]),
    29: (NonTerminal.E, [NonTerminal.G, NonTerminal.ES]),
    30: (NonTerminal.E, [NonTerminal.H, NonTerminal.ES]),
    31: (NonTerminal.E, ["True", NonTerminal.ES]),
    32: (NonTerminal.E, ["False", NonTerminal.ES]),
    33: (NonTerminal.E, ["None", NonTerminal.ES]),
    34: (NonTerminal.E, ["-", NonTerminal.E, NonTerminal.ES]),
    35: (NonTerminal.E, ["not", NonTerminal.E, NonTerminal.ES]),
    36: (NonTerminal.E, ["[", NonTerminal.E2, "]", NonTerminal.ES]),
    37: (NonTerminal.E, ["(", NonTerminal.E, ")", NonTerminal.ES]),
    38: (NonTerminal.ES, [NonTerminal.E1, NonTerminal.ES]),
    39: (NonTerminal.ES, ['"']),
    40: (NonTerminal.E1, [NonTerminal.F, NonTerminal.E]),
    41: (NonTerminal.E1, ["[", NonTerminal.E, "]"]),
    42: (NonTerminal.E2, [NonTerminal.E, NonTerminal.E3]),
    43: (NonTerminal.E2, ["''"]),
    44: (NonTerminal.E3, [",", NonTerminal.E, NonTerminal.E3]),
    45: (NonTerminal.E3, ["''"]),
    46: (NonTerminal.F, ["+"]),
    47: (NonTerminal.F, ["-"]),
    48: (NonTerminal.F, ["//"]),
    49: (NonTerminal.F, ["%"]),
    50: (NonTerminal.F, ["<="]),
    51: (NonTerminal.F, [">="]),
    52: (NonTerminal.F, ["<"]),
    53: (NonTerminal.F, [">"]),
    54: (NonTerminal.F, ["!="]),
    55: (NonTerminal.F, ["=="]),
    56: (NonTerminal.F, ["and"]),
    57: (NonTerminal.F, ["or"]),
    58: (NonTerminal.G, ["0", NonTerminal.G1]),
    59: (NonTerminal.G, ["1", NonTerminal.G1]),
    60: (NonTerminal.G, ["2", NonTerminal.G1]),
    61: (NonTerminal.G, ["3", NonTerminal.G1]),
    62: (NonTerminal.G, ["4", NonTerminal.G1]),
    63: (NonTerminal.G, ["5", NonTerminal.G1]),
    64: (NonTerminal.G, ["6", NonTerminal.G1]),
    65: (NonTerminal.G, ["7", NonTerminal.G1]),
    66: (NonTerminal.G, ["8", NonTerminal.G1]),
    67: (NonTerminal.G, ["9", NonTerminal.G1]),
    68: (NonTerminal.G1, ["0", NonTerminal.G1]),
    69: (NonTerminal.G1, ["1", NonTerminal.G1]),
    70: (NonTerminal.G1, ["2", NonTerminal.G1]),
    71: (NonTerminal.G1, ["3", NonTerminal.G1]),
    72: (NonTerminal.G1, ["4", NonTerminal.G1]),
    73: (NonTerminal.G1, ["5", NonTerminal.G1]),
    74: (NonTerminal.G1, ["6", NonTerminal.G1]),
    75: (NonTerminal.G1, ["7", NonTerminal.G1]),
    76: (NonTerminal.G1, ["8", NonTerminal.G1]),
    77: (NonTerminal.G1, ["9", NonTerminal.G1]),
    78: (NonTerminal.G1, ["''"]),
    79: (NonTerminal.H, ['"', NonTerminal.H1, '"']),
    80: (NonTerminal.H1, ["b", NonTerminal.H1]),
}


parsing_table = (
    {
        NonTerminal.S: {
            "NEWLINE": 1,
            "def": 2,
            "IDENTIFIER": 2,
            "(": 2,
            "return": 2,
            "print(": 2,
            "[": 2,
            "if": 2,
            "for": 2,
            "True": 2,
            "False": 2,
            "None": 2,
            "-": 2,
            "not": 2,
            "0": 2,
            "1": 2,
            "2": 2,
            "3": 2,
            "4": 2,
            "5": 2,
            "6": 2,
            "7": 2,
            "8": 2,
            "9": 2,
            '"': 2,
        },
        NonTerminal.S1: {
            "def": 3,
            "IDENTIFIER": 4,
            "(": 4,
            "return": 4,
            "print(": 4,
            "[": 4,
            "if": 4,
            "for": 4,
            "True": 4,
            "False": 4,
            "None": 4,
            "-": 4,
            "not": 4,
            "0": 4,
            "1": 4,
            "2": 4,
            "3": 4,
            "4": 4,
            "5": 4,
            "6": 4,
            "7": 4,
            "8": 4,
            "9": 4,
            '"': 4,
        },
        NonTerminal.S2: {
            "EOF": 6,
            "IDENTIFIER": 5,
            "(": 5,
            "return": 5,
            "print(": 5,
            "[": 5,
            "if": 5,
            "for": 5,
            "True": 5,
            "False": 5,
            "None": 5,
            "-": 5,
            "not": 5,
            "0": 5,
            "1": 5,
            "2": 5,
            "3": 5,
            "4": 5,
            "5": 5,
            "6": 5,
            "7": 5,
            "8": 5,
            "9": 5,
            '"': 5,
        },
        NonTerminal.A: {
            "def": 7,
        },
        NonTerminal.I: {
            "IDENTIFIER": 8,
        },
        NonTerminal.I1: {
            "''": 10,
            ",IDENTIFIER": 9,
        },
        NonTerminal.B: {
            "NEWLINE": 12,
            "IDENTIFIER": 11,
            "(": 11,
            "return": 11,
            "print(": 11,
            "[": 11,
            "True": 11,
            "False": 11,
            "None": 11,
            "-": 11,
            "not": 11,
            "0": 11,
            "1": 11,
            "2": 11,
            "3": 11,
            "4": 11,
            "5": 11,
            "6": 11,
            "7": 11,
            "8": 11,
            "9": 11,
            '"': 11,
        },
        NonTerminal.B1: {
            "NEWLINE": 13,
            "END": 14,
        },
        NonTerminal.C: {
            "IDENTIFIER": 16,
            "return": 15,
            "print(": 18,
            "(": 17,
            "[": 17,
            "True": 17,
            "False": 17,
            "None": 17,
            "-": 17,
            "not": 17,
            "0": 17,
            "1": 17,
            "2": 17,
            "3": 17,
            "4": 17,
            "5": 17,
            "6": 17,
            "7": 17,
            "8": 17,
            "9": 17,
            '"': 17,
        },
        NonTerminal.C1: {
            "NEWLINE": 20,
            "[": 19,
        },
        NonTerminal.C2: {
            "NEWLINE": 23,
            "(": 22,
            "=": 21,
        },
        NonTerminal.D: {
            "if": 25,
            "for": 26,
            "IDENTIFIER": 24,
            "return": 24,
            "print(": 24,
            "(": 24,
            "[": 24,
            "True": 24,
            "False": 24,
            "None": 24,
            "-": 24,
            "not": 24,
            "0": 24,
            "1": 24,
            "2": 24,
            "3": 24,
            "4": 24,
            "5": 24,
            "6": 24,
            "7": 24,
            "8": 24,
            "9": 24,
            '"': 24,
        },
        NonTerminal.D1: {
            "else": 27,
            "NEWLINE": 28,
            "EOF": 28,
            "END": 28,
            "if": 28,
            "for": 28,
            "IDENTIFIER": 28,
            "return": 28,
            "print(": 28,
            "(": 28,
            "[": 28,
            "True": 28,
            "False": 28,
            "None": 28,
            "-": 28,
            "not": 28,
            "0": 28,
            "1": 28,
            "2": 28,
            "3": 28,
            "4": 28,
            "5": 28,
            "6": 28,
            "7": 28,
            "8": 28,
            "9": 28,
            '"': 28,
        },
        NonTerminal.E: {
            "(": 37,
            "[": 36,
            "True": 31,
            "False": 32,
            "None": 33,
            "-": 34,
            "not": 35,
            "0": 29,
            "1": 29,
            "2": 29,
            "3": 29,
            "4": 29,
            "5": 29,
            "6": 29,
            "7": 29,
            "8": 29,
            "9": 29,
            ",": 30,
        },
        NonTerminal.ES: {
            "NEWLINE": 39,
            ")": 39,
            ":": 39,
            "]": 39,
            ",": 39,
            "[": [38, 39],
            "-": [38, 39],
            "+": [38, 39],
            "//": [38, 39],
            "%": [38, 39],
            "<=": [38, 39],
            ">=": [38, 39],
            "<": [38, 39],
            ">": [38, 39],
        },
        NonTerminal.F: {
            "+": 46,
            "-": 47,
            "//": 48,
            "%": 49,
            "<=": 50,
            ">=": 51,
            "<": 52,
            ">": 53,
            "==": 55,
            "and": 56,
            "or": 57,
        },
        NonTerminal.G: {
            "0": 58,
            "1": 59,
            "2": 60,
            "3": 61,
            "4": 62,
            "5": 63,
            "6": 64,
            "7": 65,
            "8": 66,
            "9": 67,
        },
        NonTerminal.G1: {
            "NEWLINE": 78,
            ")": 78,
            ":": 78,
            "[": 78,
            "]": 78,
            "-": 78,
            "+": 78,
            "//": 78,
            "%": 78,
            "<=": 78,
            ">=": 78,
            "<": 78,
            ">": 78,
            "==": 78,
            "and": 78,
            "or": 78,
            ",": 78,
            "0": 68,
            "1": 69,
            "2": 70,
            "3": 71,
            "4": 72,
            "5": 73,
            "6": 74,
            "7": 75,
            "8": 76,
            "9": 77,
        },
        NonTerminal.H: {
            '"': 79,
        },
        NonTerminal.H1: {
            "b": 80,
        },
        NonTerminal.E1: {
            "[": 41,
            "-": 40,
            "+": 40,
            "//": 40,
            "%": 40,
            "<=": 40,
            ">=": 40,
            "<": 40,
            ">": 40,
            "==": 40,
            "!=": 40,
            "and": 40,
            "or": 40,
        },
        NonTerminal.E2: {
            "]": 43,
            "(": 42,
            "[": 42,
            "True": 42,
            "False": 42,
            "None": 42,
            "-": 42,
            "not": 42,
            "0": 42,
            "1": 42,
            "2": 42,
            "3": 42,
            "4": 42,
            "5": 42,
            "6": 42,
            "7": 42,
            "8": 42,
            "9": 42,
        },
        NonTerminal.E3: {
            ")": 45,
            "]": 45,
            ",": 44,
        },
    },
)
