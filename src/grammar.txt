S ::= Newline S
S ::= S1

S1 ::= A S1
S1 ::= D S1
S1 ::= EOF

A ::= def ident ( I )  :  B

I ::= ident I1

I1 ::= ,  ident I1
I1 ::=  ''

B ::= C N
B ::= Newline Begin D B1 End

B1 ::= Newline D B1
B1 ::=  ''

C ::= return E
C ::= ident C2
C ::= E C1
C ::= print ( E1 )

C1 ::= [ E ] = E 
C1 ::=  ''

C2 ::= = E 
C2 ::=  ''

D ::= C N 
D ::= if E : B D1
D ::= for ident in E : B

D1 ::= else : B 
D1 ::= ''


N ::= Newline N 
N ::= ''



E            ::= E_or

E_or         ::= E_and E_or_tail

E_or_tail    ::= or E_and E_or_tail 
E_or_tail    ::= ''

E_and        ::= E_not E_and_tail

E_and_tail   ::= and E_not E_and_tail 
E_and_tail  ::= ''

E_not        ::= not E_rel 
E_not       ::= E_rel

E_rel        ::= E_add E_rel_tail

E_rel_tail   ::= O_r E_add E_rel_tail 
E_rel_tail   ::= ''

E_add        ::= E_mult E_add_tail

E_add_tail   ::= O_+ E_mult E_add_tail 
E_add_tail ::= ''

E_mult       ::= E_un E_mult_tail

E_mult_tail  ::= O_* E_un E_mult_tail 
E_mult_tail ::= ''

E_un         ::= - E_un 
E_un        ::= [ E1 ]
E_un        ::= ( E1 )
E_un ::= O_un
E_un ::= ident ( E1 )

E1          ::= E E2 
E1             ::= ''

E2          ::= , E E2 
E2         ::= ''

O_r          ::= <= 
O_r         ::= >=
O_r         ::= >
O_r         ::= <
O_r         ::= !=
O_r         ::= ==

O_+          ::= + 
O_+ ::= -

O_*          ::= * 
O_*          ::= // 
O_*          ::= % 

O_un         ::= ident 
O_un         ::= const 
O_un         ::= True 
O_un         ::= False 
O_un         ::= None 


