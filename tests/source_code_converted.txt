section .data
    buffer db "    ", 10    ; Buffer pour stocker le résultat (4 chiffres max + nouvelle ligne)
    buffer_len equ $ - buffer

section .text
    global _start           ; Point d'entrée pour ld

_start:
    ; Initialisation des variables
    mov r8, 5               ; a = 5
    mov r9, 10              ; b = 10
    
    ; Calcul c = a + b
    mov r10, r8             ; r10 = a
    add r10, r9             ; r10 = a + b = c (15)
    
    ; Calcul d = a * b
    mov r11, r8             ; r11 = a
    imul r11, r9            ; r11 = a * b = d (50)
    
    ; Calcul e = b // a (division entière)
    mov rax, r9             ; rax = b (10)
    xor rdx, rdx            ; Nettoyer rdx pour la division
    div r8                  ; rax = b // a = e (2)
    mov r12, rax            ; r12 = e
    
    ; Calcul f = b - a
    mov r13, r9             ; r13 = b
    sub r13, r8             ; r13 = b - a = f (5)
    
    ; Calcul du résultat final: c + d + e + f
    mov rax, r10            ; rax = c
    add rax, r11            ; rax = c + d
    add rax, r12            ; rax = c + d + e
    add rax, r13            ; rax = c + d + e + f = 15 + 50 + 2 + 5 = 72
    
    ; Convertir le nombre en ASCII
    mov rcx, buffer         ; rcx = adresse du buffer
    add rcx, 3              ; Positionner au dernier chiffre du buffer
    mov rbx, 10             ; Base décimale
    
convert_loop:
    xor rdx, rdx            ; Nettoyer rdx pour la division
    div rbx                 ; Diviser rax par 10, quotient dans rax, reste dans rdx
    add dl, '0'             ; Convertir le reste en caractère ASCII
    mov [rcx], dl           ; Stocker le chiffre dans le buffer
    dec rcx                 ; Reculer d'une position dans le buffer
    
    test rax, rax           ; Vérifier si quotient = 0
    jnz convert_loop        ; Si non, continuer la conversion
    
    ; Ajuster pour afficher depuis le premier chiffre
    inc rcx
    
    ; Calculer la longueur de la chaîne à afficher
    mov rdx, buffer
    add rdx, 4              ; Inclure le saut de ligne
    sub rdx, rcx            ; rdx = longueur à afficher
    
    ; Afficher le résultat
    mov rax, 1              ; sys_write
    mov rdi, 1              ; stdout
    mov rsi, rcx            ; adresse du premier chiffre
    syscall
    
    ; Sortir du programme
    mov rax, 60             ; sys_exit
    xor rdi, rdi            ; code de retour 0
    syscall